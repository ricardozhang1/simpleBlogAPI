// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package models

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO blog_user (
    email, username, name, password
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, email, username, name, password, created_at, state
`

type CreateAuthorParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (BlogUser, error) {
	row := q.db.QueryRowContext(ctx, createAuthor,
		arg.Email,
		arg.Username,
		arg.Name,
		arg.Password,
	)
	var i BlogUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM blog_user
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, email, username, name, password, created_at, state FROM blog_user
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, email string) (BlogUser, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, email)
	var i BlogUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const listAuthor = `-- name: ListAuthor :many
SELECT id, email, username, name, password, created_at, state FROM blog_user
ORDER BY id
`

func (q *Queries) ListAuthor(ctx context.Context) ([]BlogUser, error) {
	rows, err := q.db.QueryContext(ctx, listAuthor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BlogUser{}
	for rows.Next() {
		var i BlogUser
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Name,
			&i.Password,
			&i.CreatedAt,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
