// Code generated by sqlc. DO NOT EDIT.
// source: tag.sql

package models

import (
	"context"
	"time"
)

const createTag = `-- name: CreateTag :one
INSERT INTO blog_tag (
    name, created_id
) VALUES (
    $1, $2
)
RETURNING id, name, created_id, modified_at, modified_id, deleted_at, state
`

type CreateTagParams struct {
	Name      string `json:"name"`
	CreatedID int32  `json:"created_id"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (BlogTag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.Name, arg.CreatedID)
	var i BlogTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedID,
		&i.ModifiedAt,
		&i.ModifiedID,
		&i.DeletedAt,
		&i.State,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM blog_tag
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name, created_id, modified_at, modified_id, deleted_at, state FROM blog_tag
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int32) (BlogTag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i BlogTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedID,
		&i.ModifiedAt,
		&i.ModifiedID,
		&i.DeletedAt,
		&i.State,
	)
	return i, err
}

const listTag = `-- name: ListTag :many
SELECT id, name, created_id, modified_at, modified_id, deleted_at, state FROM blog_tag
where id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTagParams struct {
	ID     int32 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTag(ctx context.Context, arg ListTagParams) ([]BlogTag, error) {
	rows, err := q.db.QueryContext(ctx, listTag, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BlogTag{}
	for rows.Next() {
		var i BlogTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedID,
			&i.ModifiedAt,
			&i.ModifiedID,
			&i.DeletedAt,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE blog_tag SET name=$1, modified_id=$2, modified_at=$3
WHERE id=$4
RETURNING id, name, created_id, modified_at, modified_id, deleted_at, state
`

type UpdateTagParams struct {
	Name       string    `json:"name"`
	ModifiedID int32     `json:"modified_id"`
	ModifiedAt time.Time `json:"modified_at"`
	ID         int32     `json:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (BlogTag, error) {
	row := q.db.QueryRowContext(ctx, updateTag,
		arg.Name,
		arg.ModifiedID,
		arg.ModifiedAt,
		arg.ID,
	)
	var i BlogTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedID,
		&i.ModifiedAt,
		&i.ModifiedID,
		&i.DeletedAt,
		&i.State,
	)
	return i, err
}
