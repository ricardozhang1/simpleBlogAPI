// Code generated by sqlc. DO NOT EDIT.
// source: article.sql

package models

import (
	"context"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO blog_article (
    tag_id, title, intro, content, created_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, tag_id, title, intro, content, created_at, created_id, modified_at, modified_id, deleted_at, state
`

type CreateArticleParams struct {
	TagID     int64  `json:"tag_id"`
	Title     string `json:"title"`
	Intro     string `json:"intro"`
	Content   string `json:"content"`
	CreatedID int32  `json:"created_id"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (BlogArticle, error) {
	row := q.db.QueryRowContext(ctx, createArticle,
		arg.TagID,
		arg.Title,
		arg.Intro,
		arg.Content,
		arg.CreatedID,
	)
	var i BlogArticle
	err := row.Scan(
		&i.ID,
		&i.TagID,
		&i.Title,
		&i.Intro,
		&i.Content,
		&i.CreatedAt,
		&i.CreatedID,
		&i.ModifiedAt,
		&i.ModifiedID,
		&i.DeletedAt,
		&i.State,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM blog_article
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, tag_id, title, intro, content, created_at, created_id, modified_at, modified_id, deleted_at, state FROM blog_article
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id int32) (BlogArticle, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i BlogArticle
	err := row.Scan(
		&i.ID,
		&i.TagID,
		&i.Title,
		&i.Intro,
		&i.Content,
		&i.CreatedAt,
		&i.CreatedID,
		&i.ModifiedAt,
		&i.ModifiedID,
		&i.DeletedAt,
		&i.State,
	)
	return i, err
}

const listArticle = `-- name: ListArticle :many
SELECT id, tag_id, title, intro, content, created_at, created_id, modified_at, modified_id, deleted_at, state FROM blog_article
ORDER BY id
`

func (q *Queries) ListArticle(ctx context.Context) ([]BlogArticle, error) {
	rows, err := q.db.QueryContext(ctx, listArticle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BlogArticle{}
	for rows.Next() {
		var i BlogArticle
		if err := rows.Scan(
			&i.ID,
			&i.TagID,
			&i.Title,
			&i.Intro,
			&i.Content,
			&i.CreatedAt,
			&i.CreatedID,
			&i.ModifiedAt,
			&i.ModifiedID,
			&i.DeletedAt,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
